import { SignClient } from "@walletconnect/sign-client/dist/types/client";
import Head from "next/head";
import { useEffect, useState } from "react";
import { useWalletConnect } from "../utils/useWalletConnect";
import WalletConnectButton from "../components/WalletConnectButton";
import { SessionTypes } from "@walletconnect/types";

export default function Home() {
	const { client, init, session, getAccounts, request } = useWalletConnect();
	// const [currentClient, setCurrentClient] = useState<SignClient>();
	// const [currentSession, setCurrentSession] = useState<SessionTypes.Struct>();

	useEffect(() => {
		if (!client) {
			init({ reConnect: true });
		}
	}, [client, init]);
	// useEffect(() => {
	// 	// Next js fix
	// 	setCurrentClient(client);
	// }, [client]);
	// useEffect(() => {
	// 	// Next js fix
	// 	console.log("Session: ", session);
	// 	setCurrentSession(session);
	// }, [session]);

	const handleGetVC = async () => {
		// get vc from server
		const jwt = await fetchVC();
		// send vc to wallet
		const sendToWallet = request("receive_credential", [jwt]);
	};

	const fetchVC = async () => {
		const accounts = getAccounts();
		if (!getAccounts) {
			throw new Error("No accounts found");
		}
		const res = await fetch("/api/issue-vc-uio", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({ address: accounts[0] }),
		});

		// Check if the POST was successful
		if (res.ok) {
			const { jwt } = (await res.json()) as { jwt: string };
			console.log(jwt);
			return jwt;
		} else {
			throw new Error(`Request failed with status ${res.status}`);
		}
	};
	return (
		<>
			<Head>
				<title>Swip</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="flex min-h-screen flex-col items-center justify-center">
				<div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
					<p>UIO</p>
					<p>Connection: {client ? "Yes" : "No"} </p>
					<p>Session: {client ? "Yes" : "No"} </p>
					{client && <WalletConnectButton></WalletConnectButton>}
					<button
						type="button"
						className="bg-sky-500 px-10 py-5 rouded text-l"
						title="Get VC"
						onClick={() => handleGetVC()}
					>
						Get VC
					</button>
				</div>
			</main>
		</>
	);
}
